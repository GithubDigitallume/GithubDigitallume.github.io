{"version":3,"sources":["webpack:///../../../src/components/VExpansionPanel/VExpansionPanels.ts","webpack:///../../../src/components/VRadioGroup/VRadioGroup.ts","webpack:///../../../src/mixins/rippleable/index.ts","webpack:///../../../src/components/VRadioGroup/VRadio.ts","webpack:///../../../src/mixins/comparable/index.ts","webpack:///../../../src/mixins/selectable/index.ts"],"names":["name","provide","expansionPanels","this","props","accordion","disabled","flat","hover","focusable","inset","popout","readonly","tile","Boolean","computed","classes","created","$attrs","hasOwnProperty","Array","value","length","methods","updateItem","getValue","item","nextValue","index","toggleMethod","baseMixins","radioGroup","column","type","default","height","Number","row","genDefaultSlot","$createElement","staticClass","attrs","id","role","computedId","genInputSlot","render","genLabel","label","onClick","directives","ripple","genRipple","data","center","inheritAttrs","offIcon","onIcon","isFocused","groupClasses","computedColor","computedIcon","isActive","hasLabel","hasState","isDisabled","isReadonly","computedName","rippleState","validationState","genInput","on","click","for","color","focused","genRadio","radioAttrs","setTextColor","dense","onFocus","onBlur","onChange","onKeydown","class","title","attrs$","h","valueComparator","e","model","prop","event","inputValue","falseValue","trueValue","multiple","String","hasColor","lazyValue","isDark","isMultiple","input","undefined","isDirty","watch","prevent","Object","domProps","checked","blur","change","focus","keydown","ref"],"mappings":"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","file":"js/chunk-4421dd16.c049d825.js","sourcesContent":["// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { BaseItemGroup, GroupableInstance } from '../VItemGroup/VItemGroup'\nimport VExpansionPanel from './VExpansionPanel'\n\n// Utilities\nimport { breaking } from '../../util/console'\n\n// Types\ninterface VExpansionPanelInstance extends InstanceType<typeof VExpansionPanel> {}\n\n/* @vue/component */\nexport default BaseItemGroup.extend({\n  name: 'v-expansion-panels',\n\n  provide (): object {\n    return {\n      expansionPanels: this,\n    }\n  },\n\n  props: {\n    accordion: Boolean,\n    disabled: Boolean,\n    flat: Boolean,\n    hover: Boolean,\n    focusable: Boolean,\n    inset: Boolean,\n    popout: Boolean,\n    readonly: Boolean,\n    tile: Boolean,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...BaseItemGroup.options.computed.classes.call(this),\n        'v-expansion-panels': true,\n        'v-expansion-panels--accordion': this.accordion,\n        'v-expansion-panels--flat': this.flat,\n        'v-expansion-panels--hover': this.hover,\n        'v-expansion-panels--focusable': this.focusable,\n        'v-expansion-panels--inset': this.inset,\n        'v-expansion-panels--popout': this.popout,\n        'v-expansion-panels--tile': this.tile,\n      }\n    },\n  },\n\n  created () {\n    /* istanbul ignore next */\n    if (this.$attrs.hasOwnProperty('expand')) {\n      breaking('expand', 'multiple', this)\n    }\n\n    /* istanbul ignore next */\n    if (\n      Array.isArray(this.value) &&\n      this.value.length > 0 &&\n      typeof this.value[0] === 'boolean'\n    ) {\n      breaking(':value=\"[true, false, true]\"', ':value=\"[0, 2]\"', this)\n    }\n  },\n\n  methods: {\n    updateItem (item: GroupableInstance & VExpansionPanelInstance, index: number) {\n      const value = this.getValue(item, index)\n      const nextValue = this.getValue(item, index + 1)\n\n      item.isActive = this.toggleMethod(value)\n      item.nextIsActive = this.toggleMethod(nextValue)\n    },\n  },\n})\n","// Styles\nimport '../../styles/components/_selection-controls.sass'\nimport './VRadioGroup.sass'\n\n// Extensions\nimport VInput from '../VInput'\nimport { BaseItemGroup } from '../VItemGroup/VItemGroup'\n\n// Mixins\nimport Comparable from '../../mixins/comparable'\n\n// Types\nimport mixins from '../../util/mixins'\nimport { PropType } from 'vue'\n\nconst baseMixins = mixins(\n  Comparable,\n  BaseItemGroup,\n  VInput\n)\n\n/* @vue/component */\nexport default baseMixins.extend({\n  name: 'v-radio-group',\n\n  provide () {\n    return {\n      radioGroup: this,\n    }\n  },\n\n  props: {\n    column: {\n      type: Boolean,\n      default: true,\n    },\n    height: {\n      type: [Number, String],\n      default: 'auto',\n    },\n    name: String,\n    row: Boolean,\n    // If no value set on VRadio\n    // will match valueComparator\n    // force default to null\n    value: null as unknown as PropType<any>,\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        ...VInput.options.computed.classes.call(this),\n        'v-input--selection-controls v-input--radio-group': true,\n        'v-input--radio-group--column': this.column && !this.row,\n        'v-input--radio-group--row': this.row,\n      }\n    },\n  },\n\n  methods: {\n    genDefaultSlot () {\n      return this.$createElement('div', {\n        staticClass: 'v-input--radio-group__input',\n        attrs: {\n          id: this.id,\n          role: 'radiogroup',\n          'aria-labelledby': this.computedId,\n        },\n      }, VInput.options.methods.genDefaultSlot.call(this))\n    },\n    genInputSlot () {\n      const render = VInput.options.methods.genInputSlot.call(this)\n\n      delete render.data!.on!.click\n\n      return render\n    },\n    genLabel () {\n      const label = VInput.options.methods.genLabel.call(this)\n\n      if (!label) return null\n\n      label.data!.attrs!.id = this.computedId\n      // WAI considers this an orphaned label\n      delete label.data!.attrs!.for\n      label.tag = 'legend'\n\n      return label\n    },\n    onClick: BaseItemGroup.options.methods.onClick,\n  },\n})\n","// Directives\nimport ripple from '../../directives/ripple'\n\n// Types\nimport Vue, { VNode, VNodeData, VNodeDirective } from 'vue'\n\nexport default Vue.extend({\n  name: 'rippleable',\n\n  directives: { ripple },\n\n  props: {\n    ripple: {\n      type: [Boolean, Object],\n      default: true,\n    },\n  },\n\n  methods: {\n    genRipple (data: VNodeData = {}): VNode | null {\n      if (!this.ripple) return null\n\n      data.staticClass = 'v-input--selection-controls__ripple'\n\n      data.directives = data.directives || []\n      data.directives.push({\n        name: 'ripple',\n        value: { center: true },\n      } as VNodeDirective)\n\n      return this.$createElement('div', data)\n    },\n  },\n})\n","// Styles\nimport './VRadio.sass'\n\n// Components\nimport VRadioGroup from './VRadioGroup'\nimport VLabel from '../VLabel'\nimport VIcon from '../VIcon'\nimport VInput from '../VInput'\n\n// Mixins\nimport BindsAttrs from '../../mixins/binds-attrs'\nimport Colorable from '../../mixins/colorable'\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport Rippleable from '../../mixins/rippleable'\nimport Themeable from '../../mixins/themeable'\nimport Selectable, { prevent } from '../../mixins/selectable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeData } from 'vue'\nimport mixins from '../../util/mixins'\nimport { mergeListeners } from '../../util/mergeData'\n\nconst baseMixins = mixins(\n  BindsAttrs,\n  Colorable,\n  Rippleable,\n  GroupableFactory('radioGroup'),\n  Themeable\n)\n\ninterface options extends InstanceType<typeof baseMixins> {\n  radioGroup: InstanceType<typeof VRadioGroup>\n}\n\n/* @vue/component */\nexport default baseMixins.extend<options>().extend({\n  name: 'v-radio',\n\n  inheritAttrs: false,\n\n  props: {\n    disabled: Boolean,\n    id: String,\n    label: String,\n    name: String,\n    offIcon: {\n      type: String,\n      default: '$radioOff',\n    },\n    onIcon: {\n      type: String,\n      default: '$radioOn',\n    },\n    readonly: Boolean,\n    value: {\n      default: null,\n    },\n  },\n\n  data: () => ({\n    isFocused: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-radio--is-disabled': this.isDisabled,\n        'v-radio--is-focused': this.isFocused,\n        ...this.themeClasses,\n        ...this.groupClasses,\n      }\n    },\n    computedColor (): string | undefined {\n      return Selectable.options.computed.computedColor.call(this)\n    },\n    computedIcon (): string {\n      return this.isActive\n        ? this.onIcon\n        : this.offIcon\n    },\n    computedId (): string {\n      return VInput.options.computed.computedId.call(this)\n    },\n    hasLabel: VInput.options.computed.hasLabel,\n    hasState (): boolean {\n      return (this.radioGroup || {}).hasState\n    },\n    isDisabled (): boolean {\n      return this.disabled || (\n        !!this.radioGroup &&\n        this.radioGroup.isDisabled\n      )\n    },\n    isReadonly (): boolean {\n      return this.readonly || (\n        !!this.radioGroup &&\n        this.radioGroup.isReadonly\n      )\n    },\n    computedName (): string {\n      if (this.name || !this.radioGroup) {\n        return this.name\n      }\n\n      return this.radioGroup.name || `radio-${this.radioGroup._uid}`\n    },\n    rippleState (): string | undefined {\n      return Selectable.options.computed.rippleState.call(this)\n    },\n    validationState (): string | undefined {\n      return (this.radioGroup || {}).validationState || this.computedColor\n    },\n  },\n\n  methods: {\n    genInput (args: any) {\n      // We can't actually use the mixin directly because\n      // it's made for standalone components, but its\n      // genInput method is exactly what we need\n      return Selectable.options.methods.genInput.call(this, 'radio', args)\n    },\n    genLabel () {\n      if (!this.hasLabel) return null\n\n      return this.$createElement(VLabel, {\n        on: {\n          // Label shouldn't cause the input to focus\n          click: prevent,\n        },\n        attrs: {\n          for: this.computedId,\n        },\n        props: {\n          color: this.validationState,\n          focused: this.hasState,\n        },\n      }, getSlot(this, 'label') || this.label)\n    },\n    genRadio () {\n      const { title, ...radioAttrs } = this.attrs$\n\n      return this.$createElement('div', {\n        staticClass: 'v-input--selection-controls__input',\n      }, [\n        this.$createElement(VIcon, this.setTextColor(this.validationState, {\n          props: {\n            dense: this.radioGroup && this.radioGroup.dense,\n          },\n        }), this.computedIcon),\n        this.genInput({\n          name: this.computedName,\n          value: this.value,\n          ...radioAttrs,\n        }),\n        this.genRipple(this.setTextColor(this.rippleState)),\n      ])\n    },\n    onFocus (e: Event) {\n      this.isFocused = true\n      this.$emit('focus', e)\n    },\n    onBlur (e: Event) {\n      this.isFocused = false\n      this.$emit('blur', e)\n    },\n    onChange () {\n      if (this.isDisabled || this.isReadonly || this.isActive) return\n\n      this.toggle()\n    },\n    onKeydown: () => {}, // Override default with noop\n  },\n\n  render (h): VNode {\n    const data: VNodeData = {\n      staticClass: 'v-radio',\n      class: this.classes,\n      on: mergeListeners({\n        click: this.onChange,\n      }, this.listeners$),\n      attrs: { title: this.attrs$.title },\n    }\n\n    return h('div', data, [\n      this.genRadio(),\n      this.genLabel(),\n    ])\n  },\n})\n","import Vue from 'vue'\nimport { PropValidator } from 'vue/types/options'\nimport { deepEqual } from '../../util/helpers'\n\nexport default Vue.extend({\n  name: 'comparable',\n  props: {\n    valueComparator: {\n      type: Function,\n      default: deepEqual,\n    } as PropValidator<typeof deepEqual>,\n  },\n})\n","// Components\nimport VInput from '../../components/VInput'\n\n// Mixins\nimport Rippleable from '../rippleable'\nimport Comparable from '../comparable'\n\n// Utilities\nimport mixins from '../../util/mixins'\n\nexport function prevent (e: Event) {\n  e.preventDefault()\n}\n\n/* @vue/component */\nexport default mixins(\n  VInput,\n  Rippleable,\n  Comparable\n).extend({\n  name: 'selectable',\n\n  model: {\n    prop: 'inputValue',\n    event: 'change',\n  },\n\n  props: {\n    id: String,\n    inputValue: null as any,\n    falseValue: null as any,\n    trueValue: null as any,\n    multiple: {\n      type: Boolean,\n      default: null,\n    },\n    label: String,\n  },\n\n  data () {\n    return {\n      hasColor: this.inputValue,\n      lazyValue: this.inputValue,\n    }\n  },\n\n  computed: {\n    computedColor (): string | undefined {\n      if (!this.isActive) return undefined\n      if (this.color) return this.color\n      if (this.isDark && !this.appIsDark) return 'white'\n      return 'primary'\n    },\n    isMultiple (): boolean {\n      return this.multiple === true || (this.multiple === null && Array.isArray(this.internalValue))\n    },\n    isActive (): boolean {\n      const value = this.value\n      const input = this.internalValue\n\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) return false\n\n        return input.some(item => this.valueComparator(item, value))\n      }\n\n      if (this.trueValue === undefined || this.falseValue === undefined) {\n        return value\n          ? this.valueComparator(value, input)\n          : Boolean(input)\n      }\n\n      return this.valueComparator(input, this.trueValue)\n    },\n    isDirty (): boolean {\n      return this.isActive\n    },\n    rippleState (): string | undefined {\n      return !this.isDisabled && !this.validationState\n        ? undefined\n        : this.validationState\n    },\n  },\n\n  watch: {\n    inputValue (val) {\n      this.lazyValue = val\n      this.hasColor = val\n    },\n  },\n\n  methods: {\n    genLabel () {\n      const label = VInput.options.methods.genLabel.call(this)\n\n      if (!label) return label\n\n      label!.data!.on = {\n        // Label shouldn't cause the input to focus\n        click: prevent,\n      }\n\n      return label\n    },\n    genInput (type: string, attrs: object) {\n      return this.$createElement('input', {\n        attrs: Object.assign({\n          'aria-checked': this.isActive.toString(),\n          disabled: this.isDisabled,\n          id: this.computedId,\n          role: type,\n          type,\n        }, attrs),\n        domProps: {\n          value: this.value,\n          checked: this.isActive,\n        },\n        on: {\n          blur: this.onBlur,\n          change: this.onChange,\n          focus: this.onFocus,\n          keydown: this.onKeydown,\n          click: prevent,\n        },\n        ref: 'input',\n      })\n    },\n    onBlur () {\n      this.isFocused = false\n    },\n    onClick (e: Event) {\n      this.onChange()\n      this.$emit('click', e)\n    },\n    onChange () {\n      if (!this.isInteractive) return\n\n      const value = this.value\n      let input = this.internalValue\n\n      if (this.isMultiple) {\n        if (!Array.isArray(input)) {\n          input = []\n        }\n\n        const length = input.length\n\n        input = input.filter((item: any) => !this.valueComparator(item, value))\n\n        if (input.length === length) {\n          input.push(value)\n        }\n      } else if (this.trueValue !== undefined && this.falseValue !== undefined) {\n        input = this.valueComparator(input, this.trueValue) ? this.falseValue : this.trueValue\n      } else if (value) {\n        input = this.valueComparator(input, value) ? null : value\n      } else {\n        input = !input\n      }\n\n      this.validate(true, input)\n      this.internalValue = input\n      this.hasColor = input\n    },\n    onFocus () {\n      this.isFocused = true\n    },\n    /** @abstract */\n    onKeydown (e: Event) {},\n  },\n})\n"],"sourceRoot":""}